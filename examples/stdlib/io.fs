\ В данном файле описаны функции, необходимые для ввода и вывода данных
\ Описаны стандартные функции для чтения строки, буфера, числа
\ а также вывода буферов данных

\ ============================================================================================================================

\ Подключение необходимых библиотек
#include "buffer.fs"

\ ============================================================================================================================

\ Конфигурация
: eof_symbol 10 ;                       \ Символ окончания ввода при чтении строки

\ ============================================================================================================================

\ Вспомогательные переменные для чтения
var is_data_ready                       \ Флаг чтения очередного символа
var buffer                              \ Буфер для хранения считанного значения

\ ============================================================================================================================

\ Печать значений из буфера
\ --------------------------------------------------------------------
\   ... addr        --->        ...
\ --------------------------------------------------------------------
: print_buffer
    count                               \ Разделяем данные и размер
    begin
        swap                            \ Вынесли адрес наверх
        dup load print                  \ Напечатали значение
        1 +                             \ Увеличили адрес на 1
        swap                            \ Вынесли длину наверх
        1 -                             \ Уменьшили длину на 1
        dup                             \ Продублировали длину, так как until заберёт значение со стека
    until
    drop drop                           \ Удаляем вспомогательные значения со стека
;

\ ============================================================================================================================

\ Чтение значения
\ Выполняет чтение одного значения из потока ввода
\ --------------------------------------------------------------------
\   ...        --->        ... value
\ --------------------------------------------------------------------
: read_value
    is_data_ready 0 store               \ Снятие флага готовности ввода
    en_int                              \ Разрешение прерываний
    begin                               \ Запускаем цикл чтения
        is_data_ready load              \ Загружаем флаг ввода
        if
            buffer load                 \ Если данные готовы загружаем считанный символ
            0                           \ Останавливаем цикл
        else
            1                           \ Продолжение цикла чтения
        then
    until
;

\ ============================================================================================================================

\ Чтение строки
\ Чтение выполняется до символа окончания ввода (настраивается в шапке данного файла)
\ Строка сохраняется в буфер
\ !!! Переполнение буфера не контролируется !!
\ --------------------------------------------------------------------
\   ... buffer_addr        --->        ...
\ --------------------------------------------------------------------
: read_string
    dup 0 store                         \ Инициализация буфера как пустой паскаль строки
    begin                               \ Запускаем сам цикл чтения строки
        dup                             \ Дублируем адрес буфера, чтобы не потерять его
        read_value                      \ Читаем очередной символ

        dup eof_symbol =                \ Проверяем на равенство символу окончания ввода
        if
            0                           \ Если равны, останавливаем цикл чтения
        else
            swap push_back              \ Иначе добавляем считанные символ в буфер
            1                           \ и продолжаем цикл чтения
        then
    until
    drop                                \ Удаляем адрес строки со стека
;

\ ============================================================================================================================

\ Чтение массива
\ Сначала читается длинна массива, после чего значения
\ Массив сохраняется в буфер
\ !!! Переполнение буфера не контролируется !!
\ --------------------------------------------------------------------
\   ... buffer_addr        --->        ...
\ --------------------------------------------------------------------
: read_array
    dup read_value store                \ Читаем длину массива и сразу сохраняем её
    dup load                            \ Кладём длину на стек (это будет счётчик)
    swap                                \ Возвращаем адрес на вершину стека
    1 +                                 \ Увеличиваем адрес буфера, чтобы пропустить длину
    begin                               \ Запускаем цикл чтения массива
        swap                            \ Выставляем счётчик длинны наверх
        dup 0 = if                      \ Если оставшаяся длинна массива равна нулю
            0                           \ Выходим из цикла
        else
            1 -                         \ Уменьшаем длину на 1
            swap                        \ Выставляем адрес буфера наверх
            dup read_value store        \ Читаем и сохраняем очередной элемент
            1 +                         \ Увеличиваем адрес
            1                           \ Продолжаем цикл
        then
    until
    drop drop                           \ Удаляем счётчик и адрес буфера из стека
;

\ ============================================================================================================================

\ Блок обработки прерываний
\ Выполняется загрузка одного входного символа в буфер
\ после чего выставляется флаг готовности ввода и запрещаются прерывания
\ --------------------------------------------------------------------
\   ...        --->        ...
\ --------------------------------------------------------------------
begin_int
    buffer read store               \ Сохраняем введённый символ в буфер
    is_data_ready 1 store           \ Устанавливаем флаг готовности
    di_int                          \ Отключается прерывания
end_int

\ ============================================================================================================================
